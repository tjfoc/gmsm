package sm4

import (
	"bytes"
	"fmt"
	"testing"
)

func TestPKCS7Padding(t *testing.T) {
	// 13 byte 不对齐
	plaintxt := []byte{
		0x31, 0x32, 0x33, 0x34,
		0x35, 0x36, 0x37, 0x38,
		0x31, 0x32, 0x33, 0x34,
		0x35,
	}
	expect := []byte{
		0x31, 0x32, 0x33, 0x34,
		0x35, 0x36, 0x37, 0x38,
		0x31, 0x32, 0x33, 0x34,
		0x35, 0x03, 0x03, 0x03,
	}

	actual := PKCS7Padding(plaintxt, BlockSize)
	fmt.Printf("%02X\n", actual)
	if !bytes.Equal(actual, expect) {
		t.Fatalf("PKCS#7 padding error")
	}

	// 16Byte 已经对齐的情况
	plaintxt = []byte{
		0x31, 0x32, 0x33, 0x34,
		0x35, 0x36, 0x37, 0x38,
		0x31, 0x32, 0x33, 0x34,
		0x35, 0x36, 0x37, 0x38,
	}
	expect = []byte{
		0x31, 0x32, 0x33, 0x34,
		0x35, 0x36, 0x37, 0x38,
		0x31, 0x32, 0x33, 0x34,
		0x35, 0x36, 0x37, 0x38,

		0x10, 0x10, 0x10, 0x10,
		0x10, 0x10, 0x10, 0x10,
		0x10, 0x10, 0x10, 0x10,
		0x10, 0x10, 0x10, 0x10,
	}

	actual = PKCS7Padding(plaintxt, BlockSize)
	fmt.Printf("%02X\n", actual)
	if !bytes.Equal(actual, expect) {
		t.Fatalf("PKCS#7 padding error")
	}

}

func TestPKCS7UnPadding(t *testing.T) {
	// 16 byte Padding 3byte
	afterPadding := []byte{
		0x31, 0x32, 0x33, 0x34,
		0x35, 0x36, 0x37, 0x38,
		0x31, 0x32, 0x33, 0x34,
		0x35, 0x03, 0x03, 0x03,
	}
	expect := []byte{
		0x31, 0x32, 0x33, 0x34,
		0x35, 0x36, 0x37, 0x38,
		0x31, 0x32, 0x33, 0x34,
		0x35,
	}
	actual := PKCS7UnPadding(afterPadding)
	fmt.Printf("%02X\n", actual)
	if !bytes.Equal(actual, expect) {
		t.Fatalf("PKCS#7 unpadding error")
	}
}

func TestEcbEncrypt(t *testing.T) {
	kek := []byte{
		0x31, 0x32, 0x33, 0x34,
		0x35, 0x36, 0x37, 0x38,
		0x31, 0x32, 0x33, 0x34,
		0x35, 0x36, 0x37, 0x38,
	}
	block, err := NewCipher(kek)
	if err != nil {
		t.Fatal(err)
	}

	// 13 byte
	plaintxt := []byte{
		0x31, 0x32, 0x33, 0x34,
		0x35, 0x36, 0x37, 0x38,
		0x31, 0x32, 0x33, 0x34,
		0x35,
	}
	expect := []byte{
		0xD6, 0xA1, 0x4E, 0x45,
		0x42, 0xCB, 0x80, 0xF9,
		0xAE, 0x77, 0xA2, 0x18,
		0xDD, 0xF3, 0x7B, 0x53,
	}
	data := PKCS7Padding(plaintxt, BlockSize)
	encrypted := EcbEncrypt(data, block)
	fmt.Printf("%02X\n", encrypted)
	if !bytes.Equal(encrypted, expect) {
		t.Fatalf("ECB Encrypt error")
	}

	decryptData := EcbDecrypt(encrypted, block)
	raw := PKCS7UnPadding(decryptData)
	if !bytes.Equal(raw, plaintxt) {
		t.Fatalf("ECB Decrypt error")
	}
}

func TestEcbDecrypt(t *testing.T) {
	kek := []byte{
		0x31, 0x32, 0x33, 0x34,
		0x35, 0x36, 0x37, 0x38,
		0x31, 0x32, 0x33, 0x34,
		0x35, 0x36, 0x37, 0x38,
	}
	block, err := NewCipher(kek)
	if err != nil {
		t.Fatal(err)
	}

	paddedCipher := []byte{
		0xD6, 0xA1, 0x4E, 0x45,
		0x42, 0xCB, 0x80, 0xF9,
		0xAE, 0x77, 0xA2, 0x18,
		0xDD, 0xF3, 0x7B, 0x53,
	}
	expect := []byte{
		0x31, 0x32, 0x33, 0x34,
		0x35, 0x36, 0x37, 0x38,
		0x31, 0x32, 0x33, 0x34,
		0x35,
	}
	decryptData := EcbDecrypt(paddedCipher, block)
	raw := PKCS7UnPadding(decryptData)
	if !bytes.Equal(raw, expect) {
		t.Fatalf("ECB Decrypt error")
	}
}
